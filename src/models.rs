// defines data containers
// corresponding to the SQL query from the database
use diesel::prelude::*;
use crate::schema::posts;       // diesel CLI generated struct
use crate::schema::users;
use serde::{Serialize, Deserialize};
// struct needs to match the structure of SQL query
// or more accurately, the generated schema.rs file
// Queryable trait : will geerate all of the code needed to load a Post struct from a SQL query
//
// Selectable trait : will generate code to construct a matching select clause based on your model type based on table defined
// via #[diesel(table_name=crate::schema::posts)]
#[derive(Queryable, Selectable, Debug, Serialize, Deserialize)]        
#[diesel(table_name = crate::schema::posts)]
#[diesel(check_for_backend(diesel::pg::Pg))]
pub struct Post {
    pub id : i32,
    pub title : String,
    pub body : String,
    pub published : bool,
}

// using the Post struct as reference, this has been created for the user table
#[derive(Queryable, Selectable, Debug, Serialize, Deserialize)]
#[diesel(table_name = crate::schema::users)]
#[diesel(check_for_backend(diesel::pg::Pg))]
pub struct User {
    pub id : i32,       // autogenerated
    pub first_name : String,
    pub last_name : String,
    pub email : String,
    pub user_password : String,
    pub major : String,
    pub date_of_birth : String,
    pub pronouns : String,
    pub gender : String,
    pub degree_type : String,
    pub college_year : String       // NOTE : should be integer parsable

}

// struct to use for inserting a new record
// recall that id is autogenerated
// published has an automatic default value of false
// therefore not included and instead we only include title and body instead
#[derive(Insertable, Debug, Serialize, Deserialize)]
#[diesel(table_name=posts)]
pub struct NewPost<'a> {
    pub title : &'a str,
    pub body : &'a str

}

// references the NewPost<'a> struct
// for college_year, originally attepted to use integer data
// which causes errors
#[derive(Insertable, Debug, Serialize, Deserialize)]
#[diesel(table_name=users)]
pub struct NewUser<'a> {
    pub first_name : &'a str,
    pub last_name : &'a str,
    pub email : &'a str,
    pub user_password : &'a str,
    pub major : &'a str,
    pub date_of_birth : &'a str,
    pub pronouns : &'a str,
    pub gender : &'a str,
    pub degree_type : &'a str,
    pub college_year : &'a str
}

#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct UserLogin {
    pub email : String,
    pub password : String
}